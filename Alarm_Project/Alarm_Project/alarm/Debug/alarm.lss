
alarm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000710  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00000710  000007a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080007a  0080007a  000007be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000082c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000122c  00000000  00000000  0000086c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000718  00000000  00000000  00001a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000065f  00000000  00000000  000021b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00002810  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c7  00000000  00000000  000028a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000089a  00000000  00000000  00002c6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00003505  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e1       	ldi	r30, 0x10	; 16
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e7       	ldi	r26, 0x7A	; 122
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 38       	cpi	r26, 0x80	; 128
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <main>
  8a:	0c 94 86 03 	jmp	0x70c	; 0x70c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_7>:
        }
    }
}

ISR(TIMER1_COMPA_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
    if (SEC < 60)
  a0:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <SEC>
  a4:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <SEC+0x1>
  a8:	cc 97       	sbiw	r24, 0x3c	; 60
  aa:	4c f4       	brge	.+18     	; 0xbe <__vector_7+0x2c>
    {
        SEC++;
  ac:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <SEC>
  b0:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <SEC+0x1>
  b4:	01 96       	adiw	r24, 0x01	; 1
  b6:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <SEC+0x1>
  ba:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <SEC>
    }
    if (SEC == 60)
  be:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <SEC>
  c2:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <SEC+0x1>
  c6:	cc 97       	sbiw	r24, 0x3c	; 60
  c8:	99 f4       	brne	.+38     	; 0xf0 <__vector_7+0x5e>
    {
        if (MIN < 60)
  ca:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <MIN>
  ce:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <MIN+0x1>
  d2:	cc 97       	sbiw	r24, 0x3c	; 60
  d4:	4c f4       	brge	.+18     	; 0xe8 <__vector_7+0x56>
        {
            MIN++;
  d6:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <MIN>
  da:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <MIN+0x1>
  de:	01 96       	adiw	r24, 0x01	; 1
  e0:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <MIN+0x1>
  e4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <MIN>
        }
        SEC = 0;
  e8:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <SEC+0x1>
  ec:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <SEC>
    }
    if (MIN == 60)
  f0:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <MIN>
  f4:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <MIN+0x1>
  f8:	cc 97       	sbiw	r24, 0x3c	; 60
  fa:	99 f4       	brne	.+38     	; 0x122 <__vector_7+0x90>
    {
        if (HOU < 24)
  fc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
 100:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__data_end+0x1>
 104:	48 97       	sbiw	r24, 0x18	; 24
 106:	4c f4       	brge	.+18     	; 0x11a <__vector_7+0x88>
        {
            HOU++;
 108:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
 10c:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__data_end+0x1>
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__data_end+0x1>
 116:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__data_end>
        }
        MIN = 0;
 11a:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <MIN+0x1>
 11e:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <MIN>
    }
    if (HOU == 24)
 122:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
 126:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__data_end+0x1>
 12a:	48 97       	sbiw	r24, 0x18	; 24
 12c:	21 f4       	brne	.+8      	; 0x136 <__vector_7+0xa4>
    {
        HOU = 0;
 12e:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__data_end+0x1>
 132:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__data_end>
    }
}
 136:	9f 91       	pop	r25
 138:	8f 91       	pop	r24
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <send_a_command>:

void send_a_command(unsigned char command)
{
    PORTB = command;
 144:	88 bb       	out	0x18, r24	; 24
    PORTD &= ~(1 << registerselection);
 146:	82 b3       	in	r24, 0x12	; 18
 148:	8f 7b       	andi	r24, 0xBF	; 191
 14a:	82 bb       	out	0x12, r24	; 18
    PORTD |= 1 << enable;
 14c:	82 b3       	in	r24, 0x12	; 18
 14e:	80 62       	ori	r24, 0x20	; 32
 150:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 152:	86 e6       	ldi	r24, 0x66	; 102
 154:	90 e2       	ldi	r25, 0x20	; 32
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <send_a_command+0x12>
 15a:	00 00       	nop
    _delay_ms(3);
    PORTD &= ~(1 << enable);
 15c:	82 b3       	in	r24, 0x12	; 18
 15e:	8f 7d       	andi	r24, 0xDF	; 223
 160:	82 bb       	out	0x12, r24	; 18
    PORTB = 0xFF;
 162:	8f ef       	ldi	r24, 0xFF	; 255
 164:	88 bb       	out	0x18, r24	; 24
 166:	08 95       	ret

00000168 <send_a_character>:
}

void send_a_character(unsigned char character)
{
    PORTB = character;
 168:	88 bb       	out	0x18, r24	; 24
    PORTD |= 1 << registerselection;
 16a:	82 b3       	in	r24, 0x12	; 18
 16c:	80 64       	ori	r24, 0x40	; 64
 16e:	82 bb       	out	0x12, r24	; 18
    PORTD |= 1 << enable;
 170:	82 b3       	in	r24, 0x12	; 18
 172:	80 62       	ori	r24, 0x20	; 32
 174:	82 bb       	out	0x12, r24	; 18
 176:	86 e6       	ldi	r24, 0x66	; 102
 178:	90 e2       	ldi	r25, 0x20	; 32
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <send_a_character+0x12>
 17e:	00 00       	nop
    _delay_ms(3);
    PORTD &= ~(1 << enable);
 180:	82 b3       	in	r24, 0x12	; 18
 182:	8f 7d       	andi	r24, 0xDF	; 223
 184:	82 bb       	out	0x12, r24	; 18
    PORTB = 0xFF;
 186:	8f ef       	ldi	r24, 0xFF	; 255
 188:	88 bb       	out	0x18, r24	; 24
 18a:	08 95       	ret

0000018c <send_a_string>:
}

void send_a_string(char *string_of_characters)
{
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	ec 01       	movw	r28, r24
    while (*string_of_characters > 0)
 192:	03 c0       	rjmp	.+6      	; 0x19a <send_a_string+0xe>
    {
        send_a_character(*string_of_characters++);
 194:	21 96       	adiw	r28, 0x01	; 1
 196:	0e 94 b4 00 	call	0x168	; 0x168 <send_a_character>
    PORTB = 0xFF;
}

void send_a_string(char *string_of_characters)
{
    while (*string_of_characters > 0)
 19a:	88 81       	ld	r24, Y
 19c:	81 11       	cpse	r24, r1
 19e:	fa cf       	rjmp	.-12     	; 0x194 <send_a_string+0x8>
    {
        send_a_character(*string_of_characters++);
    }
}
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	08 95       	ret

000001a6 <main>:
static volatile int SEC = 0;
static volatile int MIN = 0;
static volatile int HOU = 0;

int main(void)
{
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	cd b7       	in	r28, 0x3d	; 61
 1ac:	de b7       	in	r29, 0x3e	; 62
 1ae:	2c 97       	sbiw	r28, 0x0c	; 12
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	f8 94       	cli
 1b4:	de bf       	out	0x3e, r29	; 62
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	cd bf       	out	0x3d, r28	; 61
    // Set up ports
    DDRA = 0b11000000; // PA6 and PA7 as output, others as input
 1ba:	80 ec       	ldi	r24, 0xC0	; 192
 1bc:	8a bb       	out	0x1a, r24	; 26
    DDRB = 0xFF;       // PORTB as output for LCD
 1be:	8f ef       	ldi	r24, 0xFF	; 255
 1c0:	87 bb       	out	0x17, r24	; 23
    DDRD = 0xFF;       // PORTD as output for LCD control
 1c2:	81 bb       	out	0x11, r24	; 17

    // Blink the LED to test if the LED hardware is working
  

    // Set up Timer1
    TCCR1B |= (1 << CS12) | (1 << CS10) | (1 << WGM12); // Prescaler 1024, CTC mode
 1c4:	8e b5       	in	r24, 0x2e	; 46
 1c6:	8d 60       	ori	r24, 0x0D	; 13
 1c8:	8e bd       	out	0x2e, r24	; 46
    OCR1A = 10800;                                      // Compare value for 1 second
 1ca:	80 e3       	ldi	r24, 0x30	; 48
 1cc:	9a e2       	ldi	r25, 0x2A	; 42
 1ce:	9b bd       	out	0x2b, r25	; 43
 1d0:	8a bd       	out	0x2a, r24	; 42
    sei();                                              // Enable global interrupts
 1d2:	78 94       	sei
    TIMSK |= (1 << OCIE1A);                             // Enable Timer1 compare interrupt
 1d4:	89 b7       	in	r24, 0x39	; 57
 1d6:	80 61       	ori	r24, 0x10	; 16
 1d8:	89 bf       	out	0x39, r24	; 57
    char SHOWALSEC[2];
    char SHOWALMIN[2];
    char SHOWALHOU[2];

    // Initialize LCD
    send_a_command(0x01); // Clear Screen
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	0e 94 a2 00 	call	0x144	; 0x144 <send_a_command>
 1e0:	2f ef       	ldi	r18, 0xFF	; 255
 1e2:	8f ea       	ldi	r24, 0xAF	; 175
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	21 50       	subi	r18, 0x01	; 1
 1e8:	80 40       	sbci	r24, 0x00	; 0
 1ea:	90 40       	sbci	r25, 0x00	; 0
 1ec:	e1 f7       	brne	.-8      	; 0x1e6 <main+0x40>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <main+0x4a>
 1f0:	00 00       	nop
    _delay_ms(50);
    send_a_command(0x38); // 8-bit mode
 1f2:	88 e3       	ldi	r24, 0x38	; 56
 1f4:	0e 94 a2 00 	call	0x144	; 0x144 <send_a_command>
 1f8:	2f ef       	ldi	r18, 0xFF	; 255
 1fa:	8f ea       	ldi	r24, 0xAF	; 175
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	21 50       	subi	r18, 0x01	; 1
 200:	80 40       	sbci	r24, 0x00	; 0
 202:	90 40       	sbci	r25, 0x00	; 0
 204:	e1 f7       	brne	.-8      	; 0x1fe <main+0x58>
 206:	00 c0       	rjmp	.+0      	; 0x208 <main+0x62>
 208:	00 00       	nop
    _delay_ms(50);
    send_a_command(0b00001100); // Display ON, Cursor OFF
 20a:	8c e0       	ldi	r24, 0x0C	; 12
 20c:	0e 94 a2 00 	call	0x144	; 0x144 <send_a_command>
 210:	2f ef       	ldi	r18, 0xFF	; 255
 212:	8f ea       	ldi	r24, 0xAF	; 175
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	21 50       	subi	r18, 0x01	; 1
 218:	80 40       	sbci	r24, 0x00	; 0
 21a:	90 40       	sbci	r25, 0x00	; 0
 21c:	e1 f7       	brne	.-8      	; 0x216 <main+0x70>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <main+0x7a>
 220:	00 00       	nop
    char SHOWMIN[2];
    char SHOWHOU[2];

    int ALSEC = 0;
    int ALMIN = 0;
    int ALHOU = 0;
 222:	e1 2c       	mov	r14, r1
 224:	f1 2c       	mov	r15, r1
    char SHOWSEC[2];
    char SHOWMIN[2];
    char SHOWHOU[2];

    int ALSEC = 0;
    int ALMIN = 0;
 226:	c1 2c       	mov	r12, r1
 228:	d1 2c       	mov	r13, r1
    _delay_ms(50);

    while (1)
    {
        // Display current time
        itoa(HOU / 10, SHOWHOU, 10);
 22a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
 22e:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__data_end+0x1>
 232:	0a e0       	ldi	r16, 0x0A	; 10
 234:	10 e0       	ldi	r17, 0x00	; 0
 236:	b8 01       	movw	r22, r16
 238:	0e 94 29 03 	call	0x652	; 0x652 <__divmodhi4>
 23c:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 23e:	4a e0       	ldi	r20, 0x0A	; 10
 240:	be 01       	movw	r22, r28
 242:	6b 5f       	subi	r22, 0xFB	; 251
 244:	7f 4f       	sbci	r23, 0xFF	; 255
 246:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__itoa_ncheck>
        send_a_string(SHOWHOU);
 24a:	ce 01       	movw	r24, r28
 24c:	05 96       	adiw	r24, 0x05	; 5
 24e:	0e 94 c6 00 	call	0x18c	; 0x18c <send_a_string>
        itoa(HOU % 10, SHOWHOU, 10);
 252:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
 256:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__data_end+0x1>
 25a:	b8 01       	movw	r22, r16
 25c:	0e 94 29 03 	call	0x652	; 0x652 <__divmodhi4>
 260:	4a e0       	ldi	r20, 0x0A	; 10
 262:	be 01       	movw	r22, r28
 264:	6b 5f       	subi	r22, 0xFB	; 251
 266:	7f 4f       	sbci	r23, 0xFF	; 255
 268:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__itoa_ncheck>
        send_a_string(SHOWHOU);
 26c:	ce 01       	movw	r24, r28
 26e:	05 96       	adiw	r24, 0x05	; 5
 270:	0e 94 c6 00 	call	0x18c	; 0x18c <send_a_string>
        send_a_string(":");
 274:	87 e7       	ldi	r24, 0x77	; 119
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 c6 00 	call	0x18c	; 0x18c <send_a_string>
        send_a_command(0x80 + 3);
 27c:	83 e8       	ldi	r24, 0x83	; 131
 27e:	0e 94 a2 00 	call	0x144	; 0x144 <send_a_command>

        itoa(MIN / 10, SHOWMIN, 10);
 282:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <MIN>
 286:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <MIN+0x1>
 28a:	b8 01       	movw	r22, r16
 28c:	0e 94 29 03 	call	0x652	; 0x652 <__divmodhi4>
 290:	cb 01       	movw	r24, r22
 292:	4a e0       	ldi	r20, 0x0A	; 10
 294:	be 01       	movw	r22, r28
 296:	6d 5f       	subi	r22, 0xFD	; 253
 298:	7f 4f       	sbci	r23, 0xFF	; 255
 29a:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__itoa_ncheck>
        send_a_string(SHOWMIN);
 29e:	ce 01       	movw	r24, r28
 2a0:	03 96       	adiw	r24, 0x03	; 3
 2a2:	0e 94 c6 00 	call	0x18c	; 0x18c <send_a_string>
        itoa(MIN % 10, SHOWMIN, 10);
 2a6:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <MIN>
 2aa:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <MIN+0x1>
 2ae:	b8 01       	movw	r22, r16
 2b0:	0e 94 29 03 	call	0x652	; 0x652 <__divmodhi4>
 2b4:	4a e0       	ldi	r20, 0x0A	; 10
 2b6:	be 01       	movw	r22, r28
 2b8:	6d 5f       	subi	r22, 0xFD	; 253
 2ba:	7f 4f       	sbci	r23, 0xFF	; 255
 2bc:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__itoa_ncheck>
        send_a_string(SHOWMIN);
 2c0:	ce 01       	movw	r24, r28
 2c2:	03 96       	adiw	r24, 0x03	; 3
 2c4:	0e 94 c6 00 	call	0x18c	; 0x18c <send_a_string>
        send_a_command(0x80 + 5);
 2c8:	85 e8       	ldi	r24, 0x85	; 133
 2ca:	0e 94 a2 00 	call	0x144	; 0x144 <send_a_command>
        send_a_string(":");
 2ce:	87 e7       	ldi	r24, 0x77	; 119
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	0e 94 c6 00 	call	0x18c	; 0x18c <send_a_string>
        send_a_command(0x80 + 6);
 2d6:	86 e8       	ldi	r24, 0x86	; 134
 2d8:	0e 94 a2 00 	call	0x144	; 0x144 <send_a_command>

        itoa(SEC / 10, SHOWSEC, 10);
 2dc:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <SEC>
 2e0:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <SEC+0x1>
 2e4:	b8 01       	movw	r22, r16
 2e6:	0e 94 29 03 	call	0x652	; 0x652 <__divmodhi4>
 2ea:	cb 01       	movw	r24, r22
 2ec:	4a e0       	ldi	r20, 0x0A	; 10
 2ee:	be 01       	movw	r22, r28
 2f0:	6f 5f       	subi	r22, 0xFF	; 255
 2f2:	7f 4f       	sbci	r23, 0xFF	; 255
 2f4:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__itoa_ncheck>
        send_a_string(SHOWSEC);
 2f8:	ce 01       	movw	r24, r28
 2fa:	01 96       	adiw	r24, 0x01	; 1
 2fc:	0e 94 c6 00 	call	0x18c	; 0x18c <send_a_string>
        itoa(SEC % 10, SHOWSEC, 10);
 300:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <SEC>
 304:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <SEC+0x1>
 308:	b8 01       	movw	r22, r16
 30a:	0e 94 29 03 	call	0x652	; 0x652 <__divmodhi4>
 30e:	4a e0       	ldi	r20, 0x0A	; 10
 310:	be 01       	movw	r22, r28
 312:	6f 5f       	subi	r22, 0xFF	; 255
 314:	7f 4f       	sbci	r23, 0xFF	; 255
 316:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__itoa_ncheck>
        send_a_string(SHOWSEC);
 31a:	ce 01       	movw	r24, r28
 31c:	01 96       	adiw	r24, 0x01	; 1
 31e:	0e 94 c6 00 	call	0x18c	; 0x18c <send_a_string>

        // Check alarm status
        if (bit_is_set(PINA, 5))
 322:	cd 9b       	sbis	0x19, 5	; 25
 324:	26 c0       	rjmp	.+76     	; 0x372 <main+0x1cc>
        {
            send_a_string(" ALM:ON ");
 326:	80 e6       	ldi	r24, 0x60	; 96
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 c6 00 	call	0x18c	; 0x18c <send_a_string>
            if ((ALHOU == HOU) & (ALMIN == MIN) & (ALSEC == SEC))
 32e:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__data_end>
 332:	50 91 7b 00 	lds	r21, 0x007B	; 0x80007b <__data_end+0x1>
 336:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <MIN>
 33a:	30 91 7d 00 	lds	r19, 0x007D	; 0x80007d <MIN+0x1>
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	e4 16       	cp	r14, r20
 342:	f5 06       	cpc	r15, r21
 344:	09 f0       	breq	.+2      	; 0x348 <main+0x1a2>
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	c2 16       	cp	r12, r18
 34c:	d3 06       	cpc	r13, r19
 34e:	09 f0       	breq	.+2      	; 0x352 <main+0x1ac>
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	89 23       	and	r24, r25
 354:	20 91 7e 00 	lds	r18, 0x007E	; 0x80007e <SEC>
 358:	30 91 7f 00 	lds	r19, 0x007F	; 0x80007f <SEC+0x1>
 35c:	91 e0       	ldi	r25, 0x01	; 1
 35e:	23 2b       	or	r18, r19
 360:	09 f0       	breq	.+2      	; 0x364 <main+0x1be>
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	88 23       	and	r24, r24
 366:	29 f0       	breq	.+10     	; 0x372 <main+0x1cc>
 368:	99 23       	and	r25, r25
 36a:	19 f0       	breq	.+6      	; 0x372 <main+0x1cc>
            {
                PORTA |= (1 << PA7); // Turn on LED
 36c:	8b b3       	in	r24, 0x1b	; 27
 36e:	80 68       	ori	r24, 0x80	; 128
 370:	8b bb       	out	0x1b, r24	; 27
            }
        }
        if (bit_is_clear(PINA, 5))
 372:	cd 99       	sbic	0x19, 5	; 25
 374:	07 c0       	rjmp	.+14     	; 0x384 <main+0x1de>
        {
            send_a_string(" ALM:OFF");
 376:	89 e6       	ldi	r24, 0x69	; 105
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	0e 94 c6 00 	call	0x18c	; 0x18c <send_a_string>
            PORTA &= ~(1 << PA7); // Turn off LED
 37e:	8b b3       	in	r24, 0x1b	; 27
 380:	8f 77       	andi	r24, 0x7F	; 127
 382:	8b bb       	out	0x1b, r24	; 27
        }
        send_a_command(0x80 + 0x40 + 0);
 384:	80 ec       	ldi	r24, 0xC0	; 192
 386:	0e 94 a2 00 	call	0x144	; 0x144 <send_a_command>

        // Display alarm time
        send_a_string("ALARM:");
 38a:	82 e7       	ldi	r24, 0x72	; 114
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	0e 94 c6 00 	call	0x18c	; 0x18c <send_a_string>
        send_a_command(0x80 + 0x40 + 7);
 392:	87 ec       	ldi	r24, 0xC7	; 199
 394:	0e 94 a2 00 	call	0x144	; 0x144 <send_a_command>

        itoa(ALHOU / 10, SHOWALHOU, 10);
 398:	0a e0       	ldi	r16, 0x0A	; 10
 39a:	10 e0       	ldi	r17, 0x00	; 0
 39c:	c7 01       	movw	r24, r14
 39e:	b8 01       	movw	r22, r16
 3a0:	0e 94 29 03 	call	0x652	; 0x652 <__divmodhi4>
 3a4:	9b 01       	movw	r18, r22
 3a6:	5c 01       	movw	r10, r24
 3a8:	4a e0       	ldi	r20, 0x0A	; 10
 3aa:	be 01       	movw	r22, r28
 3ac:	65 5f       	subi	r22, 0xF5	; 245
 3ae:	7f 4f       	sbci	r23, 0xFF	; 255
 3b0:	c9 01       	movw	r24, r18
 3b2:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__itoa_ncheck>
        send_a_string(SHOWALHOU);
 3b6:	ce 01       	movw	r24, r28
 3b8:	0b 96       	adiw	r24, 0x0b	; 11
 3ba:	0e 94 c6 00 	call	0x18c	; 0x18c <send_a_string>
 3be:	4a e0       	ldi	r20, 0x0A	; 10
 3c0:	be 01       	movw	r22, r28
 3c2:	65 5f       	subi	r22, 0xF5	; 245
 3c4:	7f 4f       	sbci	r23, 0xFF	; 255
 3c6:	c5 01       	movw	r24, r10
 3c8:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__itoa_ncheck>
        itoa(ALHOU % 10, SHOWALHOU, 10);
        send_a_string(SHOWALHOU);
 3cc:	ce 01       	movw	r24, r28
 3ce:	0b 96       	adiw	r24, 0x0b	; 11
 3d0:	0e 94 c6 00 	call	0x18c	; 0x18c <send_a_string>
        send_a_command(0x80 + 0x40 + 9);
 3d4:	89 ec       	ldi	r24, 0xC9	; 201
 3d6:	0e 94 a2 00 	call	0x144	; 0x144 <send_a_command>
        send_a_string(":");
 3da:	87 e7       	ldi	r24, 0x77	; 119
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	0e 94 c6 00 	call	0x18c	; 0x18c <send_a_string>
        send_a_command(0x80 + 0x40 + 10);
 3e2:	8a ec       	ldi	r24, 0xCA	; 202
 3e4:	0e 94 a2 00 	call	0x144	; 0x144 <send_a_command>

        itoa(ALMIN / 10, SHOWALMIN, 10);
 3e8:	c6 01       	movw	r24, r12
 3ea:	b8 01       	movw	r22, r16
 3ec:	0e 94 29 03 	call	0x652	; 0x652 <__divmodhi4>
 3f0:	9b 01       	movw	r18, r22
 3f2:	8c 01       	movw	r16, r24
 3f4:	4a e0       	ldi	r20, 0x0A	; 10
 3f6:	be 01       	movw	r22, r28
 3f8:	67 5f       	subi	r22, 0xF7	; 247
 3fa:	7f 4f       	sbci	r23, 0xFF	; 255
 3fc:	c9 01       	movw	r24, r18
 3fe:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__itoa_ncheck>
        send_a_string(SHOWALMIN);
 402:	ce 01       	movw	r24, r28
 404:	09 96       	adiw	r24, 0x09	; 9
 406:	0e 94 c6 00 	call	0x18c	; 0x18c <send_a_string>
 40a:	4a e0       	ldi	r20, 0x0A	; 10
 40c:	be 01       	movw	r22, r28
 40e:	67 5f       	subi	r22, 0xF7	; 247
 410:	7f 4f       	sbci	r23, 0xFF	; 255
 412:	c8 01       	movw	r24, r16
 414:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__itoa_ncheck>
        itoa(ALMIN % 10, SHOWALMIN, 10);
        send_a_string(SHOWALMIN);
 418:	ce 01       	movw	r24, r28
 41a:	09 96       	adiw	r24, 0x09	; 9
 41c:	0e 94 c6 00 	call	0x18c	; 0x18c <send_a_string>
        send_a_command(0x80 + 0x40 + 12);
 420:	8c ec       	ldi	r24, 0xCC	; 204
 422:	0e 94 a2 00 	call	0x144	; 0x144 <send_a_command>
        send_a_string(":");
 426:	87 e7       	ldi	r24, 0x77	; 119
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	0e 94 c6 00 	call	0x18c	; 0x18c <send_a_string>
        send_a_command(0x80 + 0x40 + 13);
 42e:	8d ec       	ldi	r24, 0xCD	; 205
 430:	0e 94 a2 00 	call	0x144	; 0x144 <send_a_command>
 434:	4a e0       	ldi	r20, 0x0A	; 10
 436:	be 01       	movw	r22, r28
 438:	69 5f       	subi	r22, 0xF9	; 249
 43a:	7f 4f       	sbci	r23, 0xFF	; 255
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__itoa_ncheck>

        itoa(ALSEC / 10, SHOWALSEC, 10);
        send_a_string(SHOWALSEC);
 444:	ce 01       	movw	r24, r28
 446:	07 96       	adiw	r24, 0x07	; 7
 448:	0e 94 c6 00 	call	0x18c	; 0x18c <send_a_string>
 44c:	4a e0       	ldi	r20, 0x0A	; 10
 44e:	be 01       	movw	r22, r28
 450:	69 5f       	subi	r22, 0xF9	; 249
 452:	7f 4f       	sbci	r23, 0xFF	; 255
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__itoa_ncheck>
        itoa(ALSEC % 10, SHOWALSEC, 10);
        send_a_string(SHOWALSEC);
 45c:	ce 01       	movw	r24, r28
 45e:	07 96       	adiw	r24, 0x07	; 7
 460:	0e 94 c6 00 	call	0x18c	; 0x18c <send_a_string>
        send_a_command(0x80 + 0);
 464:	80 e8       	ldi	r24, 0x80	; 128
 466:	0e 94 a2 00 	call	0x144	; 0x144 <send_a_command>

        // Time setting mode
        if (bit_is_set(PINA, 4))
 46a:	cc 9b       	sbis	0x19, 4	; 25
 46c:	91 c0       	rjmp	.+290    	; 0x590 <__EEPROM_REGION_LENGTH__+0x190>
        {
            if (bit_is_clear(PINA, 0))
 46e:	c8 99       	sbic	0x19, 0	; 25
 470:	38 c0       	rjmp	.+112    	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
            {
                if (MIN < 60)
 472:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <MIN>
 476:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <MIN+0x1>
 47a:	cc 97       	sbiw	r24, 0x3c	; 60
 47c:	8c f4       	brge	.+34     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
                {
                    MIN++;
 47e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <MIN>
 482:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <MIN+0x1>
 486:	01 96       	adiw	r24, 0x01	; 1
 488:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <MIN+0x1>
 48c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <MIN>
 490:	2c ec       	ldi	r18, 0xCC	; 204
 492:	8c e6       	ldi	r24, 0x6C	; 108
 494:	97 e0       	ldi	r25, 0x07	; 7
 496:	21 50       	subi	r18, 0x01	; 1
 498:	80 40       	sbci	r24, 0x00	; 0
 49a:	90 40       	sbci	r25, 0x00	; 0
 49c:	e1 f7       	brne	.-8      	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 49e:	00 c0       	rjmp	.+0      	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
                    _delay_ms(220);
                }
                if (MIN == 60)
 4a0:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <MIN>
 4a4:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <MIN+0x1>
 4a8:	cc 97       	sbiw	r24, 0x3c	; 60
 4aa:	d9 f4       	brne	.+54     	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
                {
                    if (HOU < 24)
 4ac:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
 4b0:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__data_end+0x1>
 4b4:	48 97       	sbiw	r24, 0x18	; 24
 4b6:	4c f4       	brge	.+18     	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
                    {
                        HOU++;
 4b8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
 4bc:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__data_end+0x1>
 4c0:	01 96       	adiw	r24, 0x01	; 1
 4c2:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__data_end+0x1>
 4c6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__data_end>
                    }
                    MIN = 0;
 4ca:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <MIN+0x1>
 4ce:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <MIN>
 4d2:	2c ec       	ldi	r18, 0xCC	; 204
 4d4:	8c e6       	ldi	r24, 0x6C	; 108
 4d6:	97 e0       	ldi	r25, 0x07	; 7
 4d8:	21 50       	subi	r18, 0x01	; 1
 4da:	80 40       	sbci	r24, 0x00	; 0
 4dc:	90 40       	sbci	r25, 0x00	; 0
 4de:	e1 f7       	brne	.-8      	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
 4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
                    _delay_ms(220);
                }
            }
            if (bit_is_clear(PINA, 1))
 4e2:	c9 99       	sbic	0x19, 1	; 25
 4e4:	18 c0       	rjmp	.+48     	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
            {
                if (MIN > 0)
 4e6:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <MIN>
 4ea:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <MIN+0x1>
 4ee:	18 16       	cp	r1, r24
 4f0:	19 06       	cpc	r1, r25
 4f2:	8c f4       	brge	.+34     	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
                {
                    MIN--;
 4f4:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <MIN>
 4f8:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <MIN+0x1>
 4fc:	01 97       	sbiw	r24, 0x01	; 1
 4fe:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <MIN+0x1>
 502:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <MIN>
 506:	2c ec       	ldi	r18, 0xCC	; 204
 508:	8c e6       	ldi	r24, 0x6C	; 108
 50a:	97 e0       	ldi	r25, 0x07	; 7
 50c:	21 50       	subi	r18, 0x01	; 1
 50e:	80 40       	sbci	r24, 0x00	; 0
 510:	90 40       	sbci	r25, 0x00	; 0
 512:	e1 f7       	brne	.-8      	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 514:	00 c0       	rjmp	.+0      	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
                    _delay_ms(220);
                }
            }
            if (bit_is_clear(PINA, 2))
 516:	ca 99       	sbic	0x19, 2	; 25
 518:	21 c0       	rjmp	.+66     	; 0x55c <__EEPROM_REGION_LENGTH__+0x15c>
            {
                if (HOU < 24)
 51a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
 51e:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__data_end+0x1>
 522:	48 97       	sbiw	r24, 0x18	; 24
 524:	4c f4       	brge	.+18     	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
                {
                    HOU++;
 526:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
 52a:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__data_end+0x1>
 52e:	01 96       	adiw	r24, 0x01	; 1
 530:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__data_end+0x1>
 534:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__data_end>
 538:	2c ec       	ldi	r18, 0xCC	; 204
 53a:	8c e6       	ldi	r24, 0x6C	; 108
 53c:	97 e0       	ldi	r25, 0x07	; 7
 53e:	21 50       	subi	r18, 0x01	; 1
 540:	80 40       	sbci	r24, 0x00	; 0
 542:	90 40       	sbci	r25, 0x00	; 0
 544:	e1 f7       	brne	.-8      	; 0x53e <__EEPROM_REGION_LENGTH__+0x13e>
 546:	00 c0       	rjmp	.+0      	; 0x548 <__EEPROM_REGION_LENGTH__+0x148>
                }
                _delay_ms(220);
                if (HOU == 24)
 548:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
 54c:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__data_end+0x1>
 550:	48 97       	sbiw	r24, 0x18	; 24
 552:	21 f4       	brne	.+8      	; 0x55c <__EEPROM_REGION_LENGTH__+0x15c>
                {
                    HOU = 0;
 554:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__data_end+0x1>
 558:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__data_end>
                }
            }
            if (bit_is_clear(PINA, 3))
 55c:	cb 99       	sbic	0x19, 3	; 25
 55e:	18 c0       	rjmp	.+48     	; 0x590 <__EEPROM_REGION_LENGTH__+0x190>
            {
                if (HOU > 0)
 560:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
 564:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__data_end+0x1>
 568:	18 16       	cp	r1, r24
 56a:	19 06       	cpc	r1, r25
 56c:	8c f4       	brge	.+34     	; 0x590 <__EEPROM_REGION_LENGTH__+0x190>
                {
                    HOU--;
 56e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
 572:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__data_end+0x1>
 576:	01 97       	sbiw	r24, 0x01	; 1
 578:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__data_end+0x1>
 57c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__data_end>
 580:	2c ec       	ldi	r18, 0xCC	; 204
 582:	8c e6       	ldi	r24, 0x6C	; 108
 584:	97 e0       	ldi	r25, 0x07	; 7
 586:	21 50       	subi	r18, 0x01	; 1
 588:	80 40       	sbci	r24, 0x00	; 0
 58a:	90 40       	sbci	r25, 0x00	; 0
 58c:	e1 f7       	brne	.-8      	; 0x586 <__EEPROM_REGION_LENGTH__+0x186>
 58e:	00 c0       	rjmp	.+0      	; 0x590 <__EEPROM_REGION_LENGTH__+0x190>
                }
            }
        }

        // Alarm setting mode
        if (bit_is_clear(PINA, 4))
 590:	cc 99       	sbic	0x19, 4	; 25
 592:	4b ce       	rjmp	.-874    	; 0x22a <main+0x84>
        {
            if (bit_is_clear(PINA, 0))
 594:	c8 99       	sbic	0x19, 0	; 25
 596:	24 c0       	rjmp	.+72     	; 0x5e0 <__EEPROM_REGION_LENGTH__+0x1e0>
            {
                if (ALMIN < 60)
 598:	2c e3       	ldi	r18, 0x3C	; 60
 59a:	c2 16       	cp	r12, r18
 59c:	d1 04       	cpc	r13, r1
 59e:	5c f4       	brge	.+22     	; 0x5b6 <__EEPROM_REGION_LENGTH__+0x1b6>
                {
                    ALMIN++;
 5a0:	8f ef       	ldi	r24, 0xFF	; 255
 5a2:	c8 1a       	sub	r12, r24
 5a4:	d8 0a       	sbc	r13, r24
 5a6:	9c ec       	ldi	r25, 0xCC	; 204
 5a8:	2c e6       	ldi	r18, 0x6C	; 108
 5aa:	87 e0       	ldi	r24, 0x07	; 7
 5ac:	91 50       	subi	r25, 0x01	; 1
 5ae:	20 40       	sbci	r18, 0x00	; 0
 5b0:	80 40       	sbci	r24, 0x00	; 0
 5b2:	e1 f7       	brne	.-8      	; 0x5ac <__EEPROM_REGION_LENGTH__+0x1ac>
 5b4:	00 c0       	rjmp	.+0      	; 0x5b6 <__EEPROM_REGION_LENGTH__+0x1b6>
                    _delay_ms(220);
                }
                if (ALMIN == 60)
 5b6:	9c e3       	ldi	r25, 0x3C	; 60
 5b8:	c9 16       	cp	r12, r25
 5ba:	d1 04       	cpc	r13, r1
 5bc:	89 f4       	brne	.+34     	; 0x5e0 <__EEPROM_REGION_LENGTH__+0x1e0>
                {
                    if (ALHOU < 24)
 5be:	28 e1       	ldi	r18, 0x18	; 24
 5c0:	e2 16       	cp	r14, r18
 5c2:	f1 04       	cpc	r15, r1
 5c4:	1c f4       	brge	.+6      	; 0x5cc <__EEPROM_REGION_LENGTH__+0x1cc>
                    {
                        ALHOU++;
 5c6:	8f ef       	ldi	r24, 0xFF	; 255
 5c8:	e8 1a       	sub	r14, r24
 5ca:	f8 0a       	sbc	r15, r24
 5cc:	9c ec       	ldi	r25, 0xCC	; 204
 5ce:	2c e6       	ldi	r18, 0x6C	; 108
 5d0:	87 e0       	ldi	r24, 0x07	; 7
 5d2:	91 50       	subi	r25, 0x01	; 1
 5d4:	20 40       	sbci	r18, 0x00	; 0
 5d6:	80 40       	sbci	r24, 0x00	; 0
 5d8:	e1 f7       	brne	.-8      	; 0x5d2 <__EEPROM_REGION_LENGTH__+0x1d2>
 5da:	00 c0       	rjmp	.+0      	; 0x5dc <__EEPROM_REGION_LENGTH__+0x1dc>
                    }
                    ALMIN = 0;
 5dc:	c1 2c       	mov	r12, r1
 5de:	d1 2c       	mov	r13, r1
                    _delay_ms(220);
                }
            }
            if (bit_is_clear(PINA, 1))
 5e0:	c9 99       	sbic	0x19, 1	; 25
 5e2:	0e c0       	rjmp	.+28     	; 0x600 <__EEPROM_REGION_LENGTH__+0x200>
            {
                if (ALMIN > 0)
 5e4:	1c 14       	cp	r1, r12
 5e6:	1d 04       	cpc	r1, r13
 5e8:	5c f4       	brge	.+22     	; 0x600 <__EEPROM_REGION_LENGTH__+0x200>
                {
                    ALMIN--;
 5ea:	91 e0       	ldi	r25, 0x01	; 1
 5ec:	c9 1a       	sub	r12, r25
 5ee:	d1 08       	sbc	r13, r1
 5f0:	2c ec       	ldi	r18, 0xCC	; 204
 5f2:	8c e6       	ldi	r24, 0x6C	; 108
 5f4:	97 e0       	ldi	r25, 0x07	; 7
 5f6:	21 50       	subi	r18, 0x01	; 1
 5f8:	80 40       	sbci	r24, 0x00	; 0
 5fa:	90 40       	sbci	r25, 0x00	; 0
 5fc:	e1 f7       	brne	.-8      	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>
 5fe:	00 c0       	rjmp	.+0      	; 0x600 <__EEPROM_REGION_LENGTH__+0x200>
                    _delay_ms(220);
                }
            }
            if (bit_is_clear(PINA, 2))
 600:	ca 99       	sbic	0x19, 2	; 25
 602:	15 c0       	rjmp	.+42     	; 0x62e <__EEPROM_REGION_LENGTH__+0x22e>
            {
                if (ALHOU < 24)
 604:	28 e1       	ldi	r18, 0x18	; 24
 606:	e2 16       	cp	r14, r18
 608:	f1 04       	cpc	r15, r1
 60a:	1c f4       	brge	.+6      	; 0x612 <__EEPROM_REGION_LENGTH__+0x212>
                {
                    ALHOU++;
 60c:	8f ef       	ldi	r24, 0xFF	; 255
 60e:	e8 1a       	sub	r14, r24
 610:	f8 0a       	sbc	r15, r24
 612:	9c ec       	ldi	r25, 0xCC	; 204
 614:	2c e6       	ldi	r18, 0x6C	; 108
 616:	87 e0       	ldi	r24, 0x07	; 7
 618:	91 50       	subi	r25, 0x01	; 1
 61a:	20 40       	sbci	r18, 0x00	; 0
 61c:	80 40       	sbci	r24, 0x00	; 0
 61e:	e1 f7       	brne	.-8      	; 0x618 <__EEPROM_REGION_LENGTH__+0x218>
 620:	00 c0       	rjmp	.+0      	; 0x622 <__EEPROM_REGION_LENGTH__+0x222>
                }
                _delay_ms(220);
                if (ALHOU == 24)
 622:	98 e1       	ldi	r25, 0x18	; 24
 624:	e9 16       	cp	r14, r25
 626:	f1 04       	cpc	r15, r1
 628:	11 f4       	brne	.+4      	; 0x62e <__EEPROM_REGION_LENGTH__+0x22e>
                {
                    ALHOU = 0;
 62a:	e1 2c       	mov	r14, r1
 62c:	f1 2c       	mov	r15, r1
                }
            }
            if (bit_is_clear(PINA, 3))
 62e:	cb 99       	sbic	0x19, 3	; 25
 630:	fc cd       	rjmp	.-1032   	; 0x22a <main+0x84>
            {
                if (ALHOU > 0)
 632:	1e 14       	cp	r1, r14
 634:	1f 04       	cpc	r1, r15
 636:	0c f0       	brlt	.+2      	; 0x63a <__EEPROM_REGION_LENGTH__+0x23a>
 638:	f8 cd       	rjmp	.-1040   	; 0x22a <main+0x84>
                {
                    ALHOU--;
 63a:	21 e0       	ldi	r18, 0x01	; 1
 63c:	e2 1a       	sub	r14, r18
 63e:	f1 08       	sbc	r15, r1
 640:	8c ec       	ldi	r24, 0xCC	; 204
 642:	9c e6       	ldi	r25, 0x6C	; 108
 644:	27 e0       	ldi	r18, 0x07	; 7
 646:	81 50       	subi	r24, 0x01	; 1
 648:	90 40       	sbci	r25, 0x00	; 0
 64a:	20 40       	sbci	r18, 0x00	; 0
 64c:	e1 f7       	brne	.-8      	; 0x646 <__EEPROM_REGION_LENGTH__+0x246>
 64e:	00 c0       	rjmp	.+0      	; 0x650 <__EEPROM_REGION_LENGTH__+0x250>
 650:	ec cd       	rjmp	.-1064   	; 0x22a <main+0x84>

00000652 <__divmodhi4>:
 652:	97 fb       	bst	r25, 7
 654:	07 2e       	mov	r0, r23
 656:	16 f4       	brtc	.+4      	; 0x65c <__divmodhi4+0xa>
 658:	00 94       	com	r0
 65a:	07 d0       	rcall	.+14     	; 0x66a <__divmodhi4_neg1>
 65c:	77 fd       	sbrc	r23, 7
 65e:	09 d0       	rcall	.+18     	; 0x672 <__divmodhi4_neg2>
 660:	0e 94 3d 03 	call	0x67a	; 0x67a <__udivmodhi4>
 664:	07 fc       	sbrc	r0, 7
 666:	05 d0       	rcall	.+10     	; 0x672 <__divmodhi4_neg2>
 668:	3e f4       	brtc	.+14     	; 0x678 <__divmodhi4_exit>

0000066a <__divmodhi4_neg1>:
 66a:	90 95       	com	r25
 66c:	81 95       	neg	r24
 66e:	9f 4f       	sbci	r25, 0xFF	; 255
 670:	08 95       	ret

00000672 <__divmodhi4_neg2>:
 672:	70 95       	com	r23
 674:	61 95       	neg	r22
 676:	7f 4f       	sbci	r23, 0xFF	; 255

00000678 <__divmodhi4_exit>:
 678:	08 95       	ret

0000067a <__udivmodhi4>:
 67a:	aa 1b       	sub	r26, r26
 67c:	bb 1b       	sub	r27, r27
 67e:	51 e1       	ldi	r21, 0x11	; 17
 680:	07 c0       	rjmp	.+14     	; 0x690 <__udivmodhi4_ep>

00000682 <__udivmodhi4_loop>:
 682:	aa 1f       	adc	r26, r26
 684:	bb 1f       	adc	r27, r27
 686:	a6 17       	cp	r26, r22
 688:	b7 07       	cpc	r27, r23
 68a:	10 f0       	brcs	.+4      	; 0x690 <__udivmodhi4_ep>
 68c:	a6 1b       	sub	r26, r22
 68e:	b7 0b       	sbc	r27, r23

00000690 <__udivmodhi4_ep>:
 690:	88 1f       	adc	r24, r24
 692:	99 1f       	adc	r25, r25
 694:	5a 95       	dec	r21
 696:	a9 f7       	brne	.-22     	; 0x682 <__udivmodhi4_loop>
 698:	80 95       	com	r24
 69a:	90 95       	com	r25
 69c:	bc 01       	movw	r22, r24
 69e:	cd 01       	movw	r24, r26
 6a0:	08 95       	ret

000006a2 <__itoa_ncheck>:
 6a2:	bb 27       	eor	r27, r27
 6a4:	4a 30       	cpi	r20, 0x0A	; 10
 6a6:	31 f4       	brne	.+12     	; 0x6b4 <__itoa_ncheck+0x12>
 6a8:	99 23       	and	r25, r25
 6aa:	22 f4       	brpl	.+8      	; 0x6b4 <__itoa_ncheck+0x12>
 6ac:	bd e2       	ldi	r27, 0x2D	; 45
 6ae:	90 95       	com	r25
 6b0:	81 95       	neg	r24
 6b2:	9f 4f       	sbci	r25, 0xFF	; 255
 6b4:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__utoa_common>

000006b8 <__utoa_ncheck>:
 6b8:	bb 27       	eor	r27, r27

000006ba <__utoa_common>:
 6ba:	fb 01       	movw	r30, r22
 6bc:	55 27       	eor	r21, r21
 6be:	aa 27       	eor	r26, r26
 6c0:	88 0f       	add	r24, r24
 6c2:	99 1f       	adc	r25, r25
 6c4:	aa 1f       	adc	r26, r26
 6c6:	a4 17       	cp	r26, r20
 6c8:	10 f0       	brcs	.+4      	; 0x6ce <__utoa_common+0x14>
 6ca:	a4 1b       	sub	r26, r20
 6cc:	83 95       	inc	r24
 6ce:	50 51       	subi	r21, 0x10	; 16
 6d0:	b9 f7       	brne	.-18     	; 0x6c0 <__utoa_common+0x6>
 6d2:	a0 5d       	subi	r26, 0xD0	; 208
 6d4:	aa 33       	cpi	r26, 0x3A	; 58
 6d6:	08 f0       	brcs	.+2      	; 0x6da <__utoa_common+0x20>
 6d8:	a9 5d       	subi	r26, 0xD9	; 217
 6da:	a1 93       	st	Z+, r26
 6dc:	00 97       	sbiw	r24, 0x00	; 0
 6de:	79 f7       	brne	.-34     	; 0x6be <__utoa_common+0x4>
 6e0:	b1 11       	cpse	r27, r1
 6e2:	b1 93       	st	Z+, r27
 6e4:	11 92       	st	Z+, r1
 6e6:	cb 01       	movw	r24, r22
 6e8:	0c 94 76 03 	jmp	0x6ec	; 0x6ec <strrev>

000006ec <strrev>:
 6ec:	dc 01       	movw	r26, r24
 6ee:	fc 01       	movw	r30, r24
 6f0:	67 2f       	mov	r22, r23
 6f2:	71 91       	ld	r23, Z+
 6f4:	77 23       	and	r23, r23
 6f6:	e1 f7       	brne	.-8      	; 0x6f0 <strrev+0x4>
 6f8:	32 97       	sbiw	r30, 0x02	; 2
 6fa:	04 c0       	rjmp	.+8      	; 0x704 <strrev+0x18>
 6fc:	7c 91       	ld	r23, X
 6fe:	6d 93       	st	X+, r22
 700:	70 83       	st	Z, r23
 702:	62 91       	ld	r22, -Z
 704:	ae 17       	cp	r26, r30
 706:	bf 07       	cpc	r27, r31
 708:	c8 f3       	brcs	.-14     	; 0x6fc <strrev+0x10>
 70a:	08 95       	ret

0000070c <_exit>:
 70c:	f8 94       	cli

0000070e <__stop_program>:
 70e:	ff cf       	rjmp	.-2      	; 0x70e <__stop_program>
